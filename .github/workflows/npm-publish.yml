name: Node.js Package

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Publish to NPM
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if bun pm view "${PACKAGE_NAME}@${PACKAGE_VERSION}" --registry https://registry.npmjs.org/ > /dev/null 2>&1; then
            echo "Version ${PACKAGE_VERSION} is already published. Skipping."
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${PACKAGE_VERSION} is not published. Publishing."
            echo "published=false" >> $GITHUB_OUTPUT
            bun publish --access public
          fi
        id: publish_check

      - name: Create release
        if: steps.publish_check.outputs.published == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.ref_name }}
          release_name: Release v${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Get package version
        if: steps.publish_check.outputs.published == 'false'
        id: get_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Upload Release Asset
        if: steps.publish_check.outputs.published == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: ${{ env.PACKAGE_VERSION }}.zip
          asset_content_type: application/zip